 % Copy constructor
        function obj = make_copy(species_in)
            obj = Species(species_in.name, species_in.traits, species_in.population, species_in.budget, species_in.mutation_rate);
        end
        
       
            
        %Updater
        function obj = species_update(obj, global_pool)
            obj.name = obj.name;
            obj.traits = obj.traits;
            obj.budget = obj.budget;
            obj.population = global_pool;%global pool has to be indexed
        end
        
         %Evolver = randomly change traits
        function new_traits = evolve_traits(obj)
            
            old_traits = obj.traits;
            new_traits = [];
            for trait = 1:length(old_traits)
                LOWER_BOUND_EVOLUTION_RATE = -0.2; % TO BE REFINED
                UPPER_BOUND_EVOLUTION_RATE = 0.2; % TO BE REFINED
                update = (UPPER_BOUND_EVOLUTION_RATE-LOWER_BOUND_EVOLUTION_RATE).*rand + LOWER_BOUND_EVOLUTION_RATE;
                new_traits(trait) = max(min(old_traits(trait) + update, 1), 0);
            end
        end
        
        
        %implement speciation
        function [species_out1, species_out2] = evolve(species_in,N)
            % Define population split
            population1 = species_in.population * (1-species_in.mutation_rate);
            population2 = species_in.population * species_in.mutation_rate;
            % Generate mutated traits
            new_traits = evolve_traits(species_in);
            new_budget = sum(new_traits);
            
            % Generate new species
            species_out1 = species_update(species_in, population1);
            species_out2 = Species(N+1, new_traits, population2, new_budget, species_in.mutation_rate);
        end
        
        
        
        
        
        
       In DEME
        
         function obj = evolve(obj, N)
            n = obj.num_species();
            for i = 1:n
                N = N + 1;
                [obj.composition(i), obj.composition(n+i)] = obj.composition(i).evolve(N);
            end
        end
        
        
        
        In PLANKTON
         %num_species = compute number of species in the plankton
        function N = num_species(obj)
            dims = obj.dim_demes();
            rows = dims(1);
            cols = dims(2);
            species_list = [];
            
            for row = 1 :rows
                for col = 1 : cols
                    deme_compos = obj.demes(row, col).composition;
                    for i = 1:length(deme_compos)
                        species_list(deme_compos(i).name) = 1;
                    end
                end
            end
            N = sum(species_list);
        end
        
        
        function composition_list = composition(obj)
        %Get names of all species
        names = [];
        dims = obj.dim_demes();
        rows = dims(1);
        cols = dims(2);
        for i = 1:rows
            for j = 1:cols
                deme_species = obj.demes(i,j).composition;
                for s = 1:length(deme_species)
                    species_name = deme_species(s).name;
                    k = find(names==species_name); 
                     if length(k) == 0
                         names = [names species_name];
                     end
                end
            end
        end
        % initialize empty species
        composition_list = [];
        names = sort(names);
        for i = 1:length(names)
            composition_list = [composition_list Species(names(i),[],0,0,0)];
        end
        % fill species data from demes
        for i = 1:rows
            for j = 1:cols
                deme_species = obj.demes(i,j).composition;
                for s = 1:length(deme_species)
                    species_name = deme_species(s).name;
                    k = find(names==species_name); 
                    
                    current_pop = composition_list(k).population;
                    new_pop = current_pop + deme_species(s).population;
                    composition_list(k).population = new_pop;
                    composition_list(k).traits = deme_species(s).traits;
                end
            end
        end
    end
    
    
    
    % EVOLVE
    % = Evolve demes
    function obj = evolve(obj)
     
        % 1. Unite all species into global pool
        species_list = obj.composition();
        
        % 2. Evolve all species
        mutatedSpecies_list = obj.composition();
        for i = 1:length(species_list)
            [old_species, new_species] = species_list(i).evolve(length(species_list)+i-1);
            species_list(i) = old_species;
            mutatedSpecies_list(i) = new_species;
        end
        
        % 3. Reassign old and new species to demes
        dims = obj.dim_demes();
        rows = dims(1);
        cols = dims(2);
        for i = 1:rows
            for j = 1:cols
                deme_comp = obj.demes(i,j).composition;
                
                for s = 1:length(deme_comp)
                    species_name = deme_comp(s).name;
                    
                    contribution = 0;
                    if species_list(species_name).population + mutatedSpecies_list(species_name).population > 0
                        contribution = deme_comp(s).population / (species_list(species_name).population + mutatedSpecies_list(species_name).population)
                    end
                    
                    contribution 
                    
                    old_species_left = species_list(species_name).population * contribution;
                    new_species_add = mutatedSpecies_list(species_name).population * contribution;
                    obj.demes(i,j).local_pool(species_name) = old_species_left;
                    obj.demes(i,j).local_pool = [obj.demes(i,j).local_pool new_species_add];
                    obj.demes(i,j).composition = [obj.demes(i,j).composition species_update(mutatedSpecies_list(species_name), new_species_add)];
                    obj.demes(i,j).local_traits = [obj.demes(i,j).local_traits; mutatedSpecies_list(species_name).traits];
                    
                end
            end  
        end
    end 
